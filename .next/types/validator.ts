// This file is generated automatically by Next.js
// Do not edit this file manually
// This file validates that all pages and layouts export the correct types

import type { AppRoutes, LayoutRoutes, ParamMap, AppRouteHandlerRoutes } from "./routes.js"
import type { ResolvingMetadata, ResolvingViewport } from "next/types.js"
import type { NextRequest } from 'next/server.js'

type AppPageConfig<Route extends AppRoutes = AppRoutes> = {
  default: React.ComponentType<{ params: Promise<ParamMap[Route]> } & any> | ((props: { params: Promise<ParamMap[Route]> } & any) => React.ReactNode | Promise<React.ReactNode> | never | void | Promise<void>)
  generateStaticParams?: (props: { params: ParamMap[Route] }) => Promise<any[]> | any[]
  generateMetadata?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingMetadata
  ) => Promise<any> | any
  generateViewport?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingViewport
  ) => Promise<any> | any
  metadata?: any
  viewport?: any
}

type LayoutConfig<Route extends LayoutRoutes = LayoutRoutes> = {
  default: React.ComponentType<LayoutProps<Route>> | ((props: LayoutProps<Route>) => React.ReactNode | Promise<React.ReactNode> | never | void | Promise<void>)
  generateStaticParams?: (props: { params: ParamMap[Route] }) => Promise<any[]> | any[]
  generateMetadata?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingMetadata
  ) => Promise<any> | any
  generateViewport?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingViewport
  ) => Promise<any> | any
  metadata?: any
  viewport?: any
}

type RouteHandlerConfig<Route extends AppRouteHandlerRoutes = AppRouteHandlerRoutes> = {
  GET?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  POST?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  PUT?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  PATCH?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  DELETE?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  HEAD?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  OPTIONS?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
}


// Validate ../../app/(auth)/(routes)/sign-in/[[...sign-in]]/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/sign-in/[[...sign-in]]">> = Specific
  const handler = {} as typeof import("../../app/(auth)/(routes)/sign-in/[[...sign-in]]/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/(auth)/(routes)/sign-up/[[...sign-up]]/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/sign-up/[[...sign-up]]">> = Specific
  const handler = {} as typeof import("../../app/(auth)/(routes)/sign-up/[[...sign-up]]/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/(dashboard)/[storeId]/(routes)/billboards/[billboardId]/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/[storeId]/billboards/[billboardId]">> = Specific
  const handler = {} as typeof import("../../app/(dashboard)/[storeId]/(routes)/billboards/[billboardId]/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/(dashboard)/[storeId]/(routes)/billboards/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/[storeId]/billboards">> = Specific
  const handler = {} as typeof import("../../app/(dashboard)/[storeId]/(routes)/billboards/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/(dashboard)/[storeId]/(routes)/categories/[categoryId]/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/[storeId]/categories/[categoryId]">> = Specific
  const handler = {} as typeof import("../../app/(dashboard)/[storeId]/(routes)/categories/[categoryId]/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/(dashboard)/[storeId]/(routes)/categories/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/[storeId]/categories">> = Specific
  const handler = {} as typeof import("../../app/(dashboard)/[storeId]/(routes)/categories/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/(dashboard)/[storeId]/(routes)/colors/[colorId]/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/[storeId]/colors/[colorId]">> = Specific
  const handler = {} as typeof import("../../app/(dashboard)/[storeId]/(routes)/colors/[colorId]/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/(dashboard)/[storeId]/(routes)/colors/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/[storeId]/colors">> = Specific
  const handler = {} as typeof import("../../app/(dashboard)/[storeId]/(routes)/colors/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/(dashboard)/[storeId]/(routes)/orders/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/[storeId]/orders">> = Specific
  const handler = {} as typeof import("../../app/(dashboard)/[storeId]/(routes)/orders/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/(dashboard)/[storeId]/(routes)/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/[storeId]">> = Specific
  const handler = {} as typeof import("../../app/(dashboard)/[storeId]/(routes)/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/(dashboard)/[storeId]/(routes)/products/[productId]/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/[storeId]/products/[productId]">> = Specific
  const handler = {} as typeof import("../../app/(dashboard)/[storeId]/(routes)/products/[productId]/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/(dashboard)/[storeId]/(routes)/products/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/[storeId]/products">> = Specific
  const handler = {} as typeof import("../../app/(dashboard)/[storeId]/(routes)/products/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/(dashboard)/[storeId]/(routes)/settings/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/[storeId]/settings">> = Specific
  const handler = {} as typeof import("../../app/(dashboard)/[storeId]/(routes)/settings/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/(dashboard)/[storeId]/(routes)/sizes/[sizeId]/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/[storeId]/sizes/[sizeId]">> = Specific
  const handler = {} as typeof import("../../app/(dashboard)/[storeId]/(routes)/sizes/[sizeId]/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/(dashboard)/[storeId]/(routes)/sizes/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/[storeId]/sizes">> = Specific
  const handler = {} as typeof import("../../app/(dashboard)/[storeId]/(routes)/sizes/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/(root)/(routes)/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/">> = Specific
  const handler = {} as typeof import("../../app/(root)/(routes)/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/api/[storeId]/billboards/[billboardId]/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/[storeId]/billboards/[billboardId]">> = Specific
  const handler = {} as typeof import("../../app/api/[storeId]/billboards/[billboardId]/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/api/[storeId]/billboards/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/[storeId]/billboards">> = Specific
  const handler = {} as typeof import("../../app/api/[storeId]/billboards/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/api/[storeId]/categories/[categoryId]/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/[storeId]/categories/[categoryId]">> = Specific
  const handler = {} as typeof import("../../app/api/[storeId]/categories/[categoryId]/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/api/[storeId]/categories/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/[storeId]/categories">> = Specific
  const handler = {} as typeof import("../../app/api/[storeId]/categories/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/api/[storeId]/checkout/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/[storeId]/checkout">> = Specific
  const handler = {} as typeof import("../../app/api/[storeId]/checkout/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/api/[storeId]/colors/[colorId]/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/[storeId]/colors/[colorId]">> = Specific
  const handler = {} as typeof import("../../app/api/[storeId]/colors/[colorId]/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/api/[storeId]/colors/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/[storeId]/colors">> = Specific
  const handler = {} as typeof import("../../app/api/[storeId]/colors/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/api/[storeId]/products/[productId]/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/[storeId]/products/[productId]">> = Specific
  const handler = {} as typeof import("../../app/api/[storeId]/products/[productId]/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/api/[storeId]/products/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/[storeId]/products">> = Specific
  const handler = {} as typeof import("../../app/api/[storeId]/products/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/api/[storeId]/sizes/[sizeId]/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/[storeId]/sizes/[sizeId]">> = Specific
  const handler = {} as typeof import("../../app/api/[storeId]/sizes/[sizeId]/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/api/[storeId]/sizes/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/[storeId]/sizes">> = Specific
  const handler = {} as typeof import("../../app/api/[storeId]/sizes/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/api/stores/[storeId]/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/stores/[storeId]">> = Specific
  const handler = {} as typeof import("../../app/api/stores/[storeId]/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/api/stores/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/stores">> = Specific
  const handler = {} as typeof import("../../app/api/stores/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/api/webhook/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/webhook">> = Specific
  const handler = {} as typeof import("../../app/api/webhook/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}





// Validate ../../app/(auth)/layout.tsx
{
  type __IsExpected<Specific extends LayoutConfig<"/">> = Specific
  const handler = {} as typeof import("../../app/(auth)/layout.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/(dashboard)/[storeId]/layout.tsx
{
  type __IsExpected<Specific extends LayoutConfig<"/[storeId]">> = Specific
  const handler = {} as typeof import("../../app/(dashboard)/[storeId]/layout.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/(root)/layout.tsx
{
  type __IsExpected<Specific extends LayoutConfig<"/">> = Specific
  const handler = {} as typeof import("../../app/(root)/layout.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/layout.tsx
{
  type __IsExpected<Specific extends LayoutConfig<"/">> = Specific
  const handler = {} as typeof import("../../app/layout.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}
